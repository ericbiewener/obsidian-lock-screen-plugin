import { __rest } from "tslib";
import assert from "assert";
import execa from "execa";
import { isString } from "./is-string";
const baseExe = (cmd, args, options) => {
	const _a = options || {},
		{ throwError } = _a,
		exeOptions = __rest(_a, ["throwError"]);
	try {
		const { exitCode, stderr, stdout } = execa.sync(
			cmd,
			args === null || args === void 0 ? void 0 : args.filter(isString),
			Object.assign({ stdio: "inherit" }, exeOptions),
		);
		if (exitCode) process.exit(exitCode);
		if (stderr) process.exit(1);
		return stdout;
	} catch (e) {
		if (throwError || exeOptions.stdio === "pipe") {
			throw e;
		}
		// Catch the error so that we don't have to see the JS stack trace. The executed command will
		// have had its own output.
		process.exit(1);
	}
};
export const exe = new Proxy(
	{},
	{
		get(_target, cmd) {
			assert(typeof cmd === "string");
			return (...args) =>
				Array.isArray(args[0])
					? baseExe(cmd, args[0], args[1])
					: baseExe(cmd, args);
		},
	},
);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZXhlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFDNUIsT0FBTyxLQUFzQixNQUFNLE9BQU8sQ0FBQztBQUMzQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBSXZDLE1BQU0sT0FBTyxHQUFHLENBQUMsR0FBVyxFQUFFLElBQVksRUFBRSxPQUFpQixFQUFFLEVBQUU7SUFDL0QsTUFBTSxLQUFnQyxPQUFPLElBQUksRUFBRSxFQUE3QyxFQUFFLFVBQVUsT0FBaUMsRUFBNUIsVUFBVSxjQUEzQixjQUE2QixDQUFnQixDQUFDO0lBRXBELElBQUk7UUFDRixNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUM3QyxHQUFHLEVBQ0gsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsa0JBRXBCLEtBQUssRUFBRSxTQUFTLElBQ2IsVUFBVSxFQUVoQixDQUFDO1FBQ0YsSUFBSSxRQUFRO1lBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNyQyxJQUFJLE1BQU07WUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVCLE9BQU8sTUFBTSxDQUFDO0tBQ2Y7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNWLElBQUksVUFBVSxJQUFJLFVBQVUsQ0FBQyxLQUFLLEtBQUssTUFBTSxFQUFFO1lBQzdDLE1BQU0sQ0FBQyxDQUFDO1NBQ1Q7UUFDRCw2RkFBNkY7UUFDN0YsMkJBQTJCO1FBQzNCLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDakI7QUFDSCxDQUFDLENBQUM7QUFTRixNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsSUFBSSxLQUFLLENBQUMsRUFBZ0IsRUFBRTtJQUM3QyxHQUFHLENBQUMsT0FBTyxFQUFFLEdBQUc7UUFDZCxNQUFNLENBQUMsT0FBTyxHQUFHLEtBQUssUUFBUSxDQUFDLENBQUM7UUFDaEMsT0FBTyxDQUFDLEdBQUcsSUFBSSxFQUFFLEVBQUUsQ0FDakIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMzQixDQUFDO0NBQ0YsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFzc2VydCBmcm9tIFwiYXNzZXJ0XCI7XG5pbXBvcnQgZXhlY2EsIHsgU3luY09wdGlvbnMgfSBmcm9tIFwiZXhlY2FcIjtcbmltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSBcIi4vaXMtc3RyaW5nXCI7XG5cbnR5cGUgT3B0aW9ucyA9IHsgdGhyb3dFcnJvcj86IGJvb2xlYW4gfSAmIFN5bmNPcHRpb25zO1xuXG5jb25zdCBiYXNlRXhlID0gKGNtZDogc3RyaW5nLCBhcmdzPzogYW55W10sIG9wdGlvbnM/OiBPcHRpb25zKSA9PiB7XG4gIGNvbnN0IHsgdGhyb3dFcnJvciwgLi4uZXhlT3B0aW9ucyB9ID0gb3B0aW9ucyB8fCB7fTtcblxuICB0cnkge1xuICAgIGNvbnN0IHsgZXhpdENvZGUsIHN0ZGVyciwgc3Rkb3V0IH0gPSBleGVjYS5zeW5jKFxuICAgICAgY21kLFxuICAgICAgYXJncz8uZmlsdGVyKGlzU3RyaW5nKSxcbiAgICAgIHtcbiAgICAgICAgc3RkaW86IFwiaW5oZXJpdFwiLFxuICAgICAgICAuLi5leGVPcHRpb25zLFxuICAgICAgfSxcbiAgICApO1xuICAgIGlmIChleGl0Q29kZSkgcHJvY2Vzcy5leGl0KGV4aXRDb2RlKTtcbiAgICBpZiAoc3RkZXJyKSBwcm9jZXNzLmV4aXQoMSk7XG4gICAgcmV0dXJuIHN0ZG91dDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmICh0aHJvd0Vycm9yIHx8IGV4ZU9wdGlvbnMuc3RkaW8gPT09IFwicGlwZVwiKSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgICAvLyBDYXRjaCB0aGUgZXJyb3Igc28gdGhhdCB3ZSBkb24ndCBoYXZlIHRvIHNlZSB0aGUgSlMgc3RhY2sgdHJhY2UuIFRoZSBleGVjdXRlZCBjb21tYW5kIHdpbGxcbiAgICAvLyBoYXZlIGhhZCBpdHMgb3duIG91dHB1dC5cbiAgICBwcm9jZXNzLmV4aXQoMSk7XG4gIH1cbn07XG5cbnR5cGUgRXhlID0ge1xuICAoYXJncz86IGFueVtdLCBvcHRpb25zPzogT3B0aW9ucyk6IFJldHVyblR5cGU8dHlwZW9mIGJhc2VFeGU+O1xuICAoLi4uYXJnczogYW55W10pOiBSZXR1cm5UeXBlPHR5cGVvZiBiYXNlRXhlPjtcbn07XG5cbnR5cGUgRXhlV2l0aENtZCA9IFJlY29yZDxzdHJpbmcsIEV4ZT47XG5cbmV4cG9ydCBjb25zdCBleGUgPSBuZXcgUHJveHkoe30gYXMgRXhlV2l0aENtZCwge1xuICBnZXQoX3RhcmdldCwgY21kKTogRXhlIHtcbiAgICBhc3NlcnQodHlwZW9mIGNtZCA9PT0gXCJzdHJpbmdcIik7XG4gICAgcmV0dXJuICguLi5hcmdzKSA9PlxuICAgICAgQXJyYXkuaXNBcnJheShhcmdzWzBdKVxuICAgICAgICA/IGJhc2VFeGUoY21kLCBhcmdzWzBdLCBhcmdzWzFdKVxuICAgICAgICA6IGJhc2VFeGUoY21kLCBhcmdzKTtcbiAgfSxcbn0pO1xuIl19
